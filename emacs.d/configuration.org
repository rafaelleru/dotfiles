#+TITLE: Configuracion de emacs.


* Informacion personal
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Rafael Leyva Ruiz"
	user-mail-address "rafaelleru95103@gmail.com"
	user-mail-address-2-2 "rafaelleru95103@correo.ugr.es"
	calendar-latitude 42.2
	calendar-longitude -71.1
	calendar-location-name "Madrid, ES")
#+END_SRC

#+RESULTS:
: Madrid, ES

* Gestion de paquetes =melpa y cask=

   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
     (require 'pallet)
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives
                  '("melpa-stable" . "https://stable.melpa.org/packages/") t)
   #+END_SRC

   #+RESULTS:
   : pallet

** Use package
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'package-archives
   '("melpa-stable" . "https://stable.melpa.org/packages/") t)

   (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
   #+END_SRC

   #+RESULTS:

* Evil-mode
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :config
       (global-evil-leader-mode)
       (evil-mode t))

     (use-package evil-commentary
       :ensure t
       :config
       (evil-commentary-mode t))
   #+END_SRC

   #+RESULTS:

   Escapar de todos los lugares posibles

   #+BEGIN_SRC emacs-lisp
     (add-hook 'messages-buffer-mode-hook 'evil-insert-state)
     (define-key evil-normal-state-map [escape] 'keyboard-quit)
     (define-key evil-visual-state-map [escape] 'keyboard-quit)
     (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
     (with-current-buffer "*Messages*"
       (evil-insert-state))
     (add-hook 'special-mode-hook 'evil-insert-state)

     (define-key evil-visual-state-map (kbd "TAB") 'indent-region)
  #+END_SRC

  #+RESULTS:
  : indent-region

* evil-leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :ensure t
       :config
       (evil-leader/set-leader "<SPC>")
       (evil-leader/set-key
	 "<SPC>" 'helm-M-x

	 ;; Window management
	 "wo" 'other-window
	 "wh" 'evil-window-left
	 "wl" 'evil-window-right
	 "wj" 'evil-window-down
	 "wk" 'evil-window-up
	 "wd" 'delete-window
	 "w\"" 'split-window-vertically
	 "wO"  'delete-other-windows
	 "w%" 'split-window-horizontally
	 "wM" 'delete-other-windows
	 "wF" 'make-frame

	 ;; projectile
	 "pp" 'projectile-switch-project
	 "pb" 'projectile-switch-to-buffer
	 "pf" 'helm-projectile-find-file
	 "pc" 'helm-projectile-compile-project
	 "ph" 'helm-projectile
	 "pu" 'helm-projectile-run-project
	 "pt" 'projectile-regenerate-tags


	 "bb" 'helm-mini
	 "bd" 'kill-this-buffer
	 "B" 'ibuffer

	 "gg" 'magit-status
	 "gc" 'magit-checkout

	 "y" 'helm-show-kill-ring
	 "nt" 'neotree-toggle
	 "ff" 'helm-find-files
	 ":" 'eval-expression
	 "/" 'swiper-helm
	 )
       )
     (evil-leader/set-key-for-mode 'python-mode ",g" 'elpy-goto-definition)
   #+END_SRC

   #+RESULTS:
<<<<<<< HEAD
=======
   : t
>>>>>>> origin/master

** evil-commentary
   #+BEGIN_SRC emacs-lisp
     (use-package evil-commentary
       :ensure t
       :config
       (evil-commentary-mode)
     )
   #+END_SRC

* Ajustes de la interfaz
** Ocultar botones que no uso y la barra de scroll.
    #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1)
      (menu-bar-mode 1)
      (scroll-bar-mode -1)
    #+END_SRC

    #+RESULTS:

** tema personalizado
   #+BEGIN_SRC emacs-lisp
     (use-package solarized-theme
       :ensure t)

     (defun load-my-theme ()
	 ;;;"""Carga mi tema solarized"""
	 (interactive)
	  (setq solarized-use-variable-pitch nil)
	  (setq solarized-height-plus-1 1.0)
	  (setq solarized-height-plus-2 1.0)
	  (setq solarized-height-plus-3 1.0)
	  (setq solarized-height-plus-4 1.0)
	  (setq solarized-high-contrast-mode-line t)
	  (load-theme 'solarized-dark t)
     )

     (add-hook 'after-init-hook 'load-my-theme)
     (when window-system
       (lambda) (load-my-theme))

     (defun load-my-white-theme ()
       (interactive)
       (disable-theme 'solarized-dark)
       (load-theme 'solarized-light t)
       )
   #+END_SRC

   #+RESULTS:
   : load-my-white-theme

** Fuente Terminus
   Permite ademas cambiar el tamaño de la ventana y la fuente para presentaciones por ejemplo.
    #+BEGIN_SRC emacs-lisp
      (use-package unicode-fonts
	:ensure t
	:config
	(unicode-fonts-setup))

      (setq hrs/default-font "Terminus")
      (setq hrs/default-font-size 15)
      (setq hrs/current-font-size hrs/default-font-size)
      (setq hrs/font-change-increment 1.1)

      (defun hrs/set-font-size ()
	"Set the font to `hrs/default-font' at `hrs/current-font-size'."
	(set-frame-font
	 (concat hrs/default-font "-" (number-to-string hrs/current-font-size))))

      (defun hrs/reset-font-size ()
	"Change font size back to `hrs/default-font-size'."
	(interactive)
	(setq hrs/current-font-size hrs/default-font-size)
	(hrs/set-font-size))

      (defun hrs/increase-font-size ()
	"Increase current font size by a factor of `hrs/font-change-increment'."
	(interactive)
	(setq hrs/current-font-size
	      (ceiling (* hrs/current-font-size hrs/font-change-increment)))
	(hrs/set-font-size))

      (defun hrs/decrease-font-size ()
	"Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
	(interactive)
	(setq hrs/current-font-size
	      (max 1
		   (floor (/ hrs/current-font-size hrs/font-change-increment))))
	(hrs/set-font-size))

      (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
      (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
      (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
      (define-key global-map (kbd "C--") 'hrs/decrease-font-size)
      (set-face-attribute 'default t :font
			  (concat hrs/default-font "-" (number-to-string hrs/current-font-size)))
    #+END_SRC

#+RESULTS:

** Resaltar linea de edicion
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-hl-line-mode)
   #+END_SRC

   #+RESULTS:

** Ver coincidencia de parentesis
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

** Tamaño al abrir una nueva ventana de emacs
   #+BEGIN_SRC emacs-lisp
     (when window-system (set-frame-size (selected-frame) 130 45))
   #+END_SRC

   #+RESULTS:

** No mover el cursor al hacer scroll con el raton
    #+BEGIN_SRC emacs-lisp
      (defun scroll-down-keep-cursor ()
	(interactive)
	(scroll-down 1))
      (defun scroll-up-keep-cursor ()
	(interactive)
	(scroll-up 1))
    #+END_SRC

#+RESULTS:
: scroll-up-keep-cursor

** Activar ido mode (cambiado por ivy-mode y swiper)
   #+BEGIN_SRC emacs-lisp :tangle no
      (ido-mode t)
   #+END_SRC

   #+RESULTS:

** Winner mode
   - Permite almacenar el estado anterior de las ventanas y volver con =C-c flecha=
   #+BEGIN_SRC emacs-lisp
     (use-package winner
       :ensure t
       :config
       (winner-mode t))
   #+END_SRC

   #+RESULTS:

** Ace window
   Visto en https://www.youtube.com/watch?v=D6OUMVbPKSA&index=5&list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg
   parece muy util.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init

       (defun my-ace-window ()
	 (interactive)
	 (ace-window 1)
	 )

       (global-set-key [remap other-window] 'ace-window)
					  ;(setq aw-scope 'frame)
       :config
       (custom-set-faces
	    '(aw-leading-char-face
	      ((t (:inherit ace-jump-face-foreground :height 2.0))))))
   #+END_SRC

   #+RESULTS:
   : t

** Auto revert mode
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

** cambar preguntas de yes or no por y or n
   http://pages.sachachua.com/.emacs.d/Sacha.html#org0477c97
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   #+RESULTS:
   : y-or-n-p

** Desactivar la pantalla de bienvenida
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC

   #+RESULTS:
   : t
** Modo terminal
   #+BEGIN_SRC emacs-lisp :tangle no
   (add-hook 'term-mode-hook '(set-background-color white))
   #+END_SRC

   #+RESULTS:
   | set-background-color | white |

* Utilidades
** seleccionar con =C-==
   como en https://www.youtube.com/watch?v=vKIFi1h0I5Y&index=17&list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg&spfreload=5
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region)
       (global-set-key (kbd "C-¿") 'er/contract-region))
   #+END_SRC

   #+RESULTS:
   : t

** suena interesante (historial de portapapeles con ivy y counsel)
   https://www.youtube.com/watch?v=LReZI7VAy8w&index=20&list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg
** atajo para ir directamente a una linea =goto-line=
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c C-g C-l") 'goto-line)
   #+END_SRC

   #+RESULTS:
   : goto-line

** Ivi mode y swiper
*** Mirar helm (parece mas potente)
    https://github.com/emacs-helm/helm
    https://github.com/abo-abo/swiper-helm
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package ivy
     :ensure t
     :config
     (ivy-mode 1))

     (use-package swiper
       :ensure t)

     (use-package counsel
       :ensure t)
     ;(setq ivy-use-virtual-buffers t)
   #+END_SRC

   #+RESULTS:

** Helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :config
       (helm-autoresize-mode t)
       (helm-mode t)
       (global-set-key (kbd "C-x C-f") 'helm-find-files); <del> borre hasta /
       (global-set-key (kbd "C-x b") 'helm-mini)
       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "M-y") 'helm-show-kill-ring)
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action))

     (use-package swiper-helm
       :ensure t
       :config
       (global-set-key "\C-s" 'swiper-helm)
       (global-set-key "\C-r" 'swiper-helm)
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))

     (use-package helm-projectile
       :ensure t
       :config
       (helm-projectile-on))
   #+END_SRC

   #+RESULTS:
   : t

*** helm-google
    ¿Por qué no?
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package helm-google
        :ensure t)
    #+END_SRC

    #+RESULTS:

** neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :config
       (setq neo-theme 'ascii)
       (global-set-key (kbd "C-x n t") 'neotree-toggle)

       (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
       (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
       (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
       (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
       )
   #+END_SRC

   #+RESULTS:
   : t
** smartparents
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
          :ensure smartparens
          :init
          (smartparens-global-mode t))
   #+END_SRC

   #+RESULTS:
** which-key
   En ocasiones no recuerdas que combinacion realiza una accion en
   concreto, ahi es cuando which-key entra en accion.
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (which-key-mode 1))
   #+END_SRC

   #+RESULTS:

** engine-mode
   seleccionar y buscar desde emacs
   #+BEGIN_SRC emacs-lisp
     (use-package engine-mode
       :ensure t
       :config
       (engine-mode t)
       (defengine duckduckgo
         "https://duckduckgo.com/?q=%s"
         :keybinding "d")

       (defengine google
         "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
         :keybinding "g")
       )
   #+END_SRC

   #+RESULTS:
   : t

** Hydra
   #+BEGIN_SRC emacs-lisp
        (use-package hydra
          :ensure t)
   #+END_SRC

   #+RESULTS:
** all the icons
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package all-the-icons
       :ensure t)

     (use-package all-the-icons-dired
       :ensure t
       :config
       (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

     ;(use-package )
   #+END_SRC

   #+RESULTS:
   : t
** powerline
   #+BEGIN_SRC emacs-lisp
     (setq powerline-arrow-left 1)
   #+END_SRC

   #+RESULTS:
   : 1

** linum-mode
   #+BEGIN_SRC emacs-lisp
     (setq display-line-numbers-mode t)
   #+END_SRC

   #+RESULTS:
   : t

* elfeed
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package elfeed
      :ensure t
      :init
      :config
    )
    (setq elfeed-db-directory "~/.emacs.d/elfeeddb")
  #+END_SRC

  #+RESULTS:
  : ~/.emacs.d/elfeeddb

  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package elfeed-goodies
    :ensure t
    :config
    )
    (elfeed-goodies/setup)
  #+END_SRC

  #+RESULTS:
  : elfeed-goodies/split-show-prev

  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package elfeed-org
      :ensure t
      )
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "/data/Nextcloud/org/rss.org"))
  #+END_SRC

  #+RESULTS:
  | /data/Nextcloud/org/rss.org |

* ledger
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package ledger
      :ensure t
      )

    (use-package evil-ledger
      :ensure t
      :after ledger
      )
  #+END_SRC

  #+RESULTS:

* Ajustes para lenguajes de programacion
** projectile mode
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :init
       (projectile-global-mode t)
       )
   #+END_SRC

   #+RESULTS:

** Autocomplete mode.
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package auto-complete
       :ensure t
       :config
       (ac-config-default)
       )

     ;; (add-hook 'org-mode-hook 'auto-complete-mode)
     ;; (add-hook 'emacs-lisp-mode-hook 'auto-complete-mode)
   #+END_SRC

   #+RESULTS:
   | auto-complete-mode | ac-emacs-lisp-mode-setup |

** Activar company mode de modo global y flycheck para colorear la sintaxis

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t))

     (use-package company
       :ensure t
       :config
       (global-company-mode t)
       (setq company-echo-delay 0)
       (setq company-idle-delay 0.1)
<<<<<<< HEAD
       (global-set-key (kbd "\t") 'company-complete)
=======
       (global-set-key (kbd "C-M-i") 'company-complete)
>>>>>>> origin/master
       (add-to-list 'company-backends 'company-elisp)
       (add-to-list 'company-backends 'company-tern)
       (add-to-list 'company-backends 'company-css)
       (add-to-list 'company-backends 'company-etags)
       (add-to-list 'company-backends 'company-yasnippet)
       )

     (use-package company-quickhelp
       :ensure t
       :init
       (company-quickhelp-mode))



     ;; Add yasnippet support for all company backends
     ;; https://github.com/syl20bnr/spacemacs/pull/179
     (defvar company-mode/enable-yas t
       "Enable yasnippet for all backends.")

     (defun company-mode/backend-with-yas (backend)
       (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
	   backend
	 (append (if (consp backend) backend (list backend))
		 '(:with company-yasnippet))))

     (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))

<<<<<<< HEAD
=======

     (use-package company-quickhelp
       :ensure t
       :config
       (company-quickhelp-mode t))
   #+END_SRC

>>>>>>> origin/master
   #+RESULTS:
   | company-yasnippet    | :with         | company-yasnippet |                  |       |                   |
   | company-etags        | :with         | company-yasnippet |                  |       |                   |
   | company-css          | :with         | company-yasnippet |                  |       |                   |
   | company-tern         | :with         | company-yasnippet |                  |       |                   |
   | company-elisp        | :with         | company-yasnippet |                  |       |                   |
<<<<<<< HEAD
=======
   | company-yasnippet    | :with         | company-yasnippet |                  |       |                   |
   | company-etags        | :with         | company-yasnippet |                  |       |                   |
   | company-css          | :with         | company-yasnippet |                  |       |                   |
   | company-tern         | :with         | company-yasnippet |                  |       |                   |
   | company-elisp        | :with         | company-yasnippet |                  |       |                   |
   | company-yasnippet    | :with         | company-yasnippet |                  |       |                   |
   | company-etags        | :with         | company-yasnippet |                  |       |                   |
   | company-css          | :with         | company-yasnippet |                  |       |                   |
   | company-elisp        | :with         | company-yasnippet |                  |       |                   |
   | company-tern         | :with         | company-yasnippet |                  |       |                   |
>>>>>>> origin/master
   | company-rtags        | :with         | company-yasnippet |                  |       |                   |
   | elpy-company-backend | :with         | company-yasnippet |                  |       |                   |
   | company-yasnippet    | :with         | company-yasnippet |                  |       |                   |
   | company-etags        | :with         | company-yasnippet |                  |       |                   |
   | company-tern         | :with         | company-yasnippet |                  |       |                   |
   | company-elisp        | :with         | company-yasnippet |                  |       |                   |
   | company-bbdb         | :with         | company-yasnippet |                  |       |                   |
   | company-nxml         | :with         | company-yasnippet |                  |       |                   |
   | company-css          | :with         | company-yasnippet |                  |       |                   |
   | company-eclim        | :with         | company-yasnippet |                  |       |                   |
   | company-semantic     | :with         | company-yasnippet |                  |       |                   |
   | company-clang        | :with         | company-yasnippet |                  |       |                   |
   | company-xcode        | :with         | company-yasnippet |                  |       |                   |
   | company-cmake        | :with         | company-yasnippet |                  |       |                   |
   | company-capf         | :with         | company-yasnippet |                  |       |                   |
   | company-files        | :with         | company-yasnippet |                  |       |                   |
   | company-dabbrev-code | company-gtags | company-etags     | company-keywords | :with | company-yasnippet |
   | company-oddmuse      | :with         | company-yasnippet |                  |       |                   |
   | company-dabbrev      | :with         | company-yasnippet |                  |       |                   |

** Yasnippet.
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (yas-global-mode 1)
       ;;(add-to-list 'company-backends 'company-yasnippet)
       )
   #+END_SRC

   #+RESULTS:

** Multiples cursores, muy practico para editar html.
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t)
   #+END_SRC

   #+RESULTS:

*** Hydra para multiple cursors.
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-multiple-cursors (global-map "C-c m")
        "multiple cursors"
        (">" mc/mark-next-like-this "next like this")
        ("<" mc/mark-previous-like-this "previous like this")
        ("c" mc/edit-lines "edit lines")
        ("e" mc/edit-ends-of-lines "edit end of lines")
        ("b" mc/edit-beginnings-of-lines "edit begin of lines")
        )
    #+END_SRC

    #+RESULTS:
    : hydra-multiple-cursors/body

** dumb jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure
       :bind
       (("C-x g o" . dumb-jump-go-other-window)
        ("C-x g j" . dumb-jump-go)
        ("C-x g x" . dumb-jump-go-prefer-external)
        ("C-x g z" . dumb-jump-go-prefer-external-other-window))
       :config (setq dumb-jump-selector 'helm)
       )
   #+END_SRC

   #+RESULTS:

** minimap
   #+BEGIN_SRC emacs-lisp
     (use-package minimap
       :ensure t
       :config
       (setq minimap-window-location 'right)
       (setq minimap-always-recenter -1)
       (setq minimap-minimum-width '0)
       (setq minimap-width-fraction 0.1)
       (setq minimap-update 1)
       )

   #+END_SRC

   #+RESULTS:
   : t

** Python
*** autocomplete con company Jedi
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package company-jedi
       :ensure t
       :config
       (defun my/python-mode-hook ()
	 (add-to-list 'company-backends 'company-jedi))
       (add-hook 'python-mode-hook 'my/python-mode-hook)
       )
   #+END_SRC

   #+RESULTS:
   : t

*** elpy
    utilidades de IDE python en emacs
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook
			    (lambda ()
			      (setq indent-tabs-mode t)
			      (setq tab-width 4)
			      (setq py-indent-tabs-mode t)
			      (setq python-indent-offset 4)
			      (add-to-list 'write-file-functions 'delete-trailing-whitespace)))

      (use-package elpy
	    :ensure t
	    :config
	    (elpy-enable)
	    (add-to-list 'company-backends 'elpy-company-backend)
	    (define-key elpy-mode-map (kbd "M-.") 'elpy-goto-definition)
	    (delq 'elpy-module-flymake elpy-modules)
	    (setq jedi:complete-on-dot t)
	    )

      (evil-leader/set-key-for-mode 'python-mode "d" 'elpy-goto-definition)
      (evil-leader/set-key-for-mode 'python-mode "D" 'elpy-goto-definition-other-window)
    #+END_SRC

    #+RESULTS:
    : t

*** Jupyter notebooks
    #+BEGIN_SRC emacs-lisp
      (use-package ein
	:ensure t
	:config
	)
    #+END_SRC

    #+RESULTS:

** etags
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package helm-etags
       :ensure t
       )
   #+END_SRC

** C++
*** autocomplete C/C++ headers from .h files in a project
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package auto-complete-c-headers
	:ensure t
	:config
	(defun my:ac-c-headers-init ()
	  (require 'auto-complete-c-headers)
	  (add-to-list 'ac-sources 'ac-source-c-headers)))

      (add-hook 'c++-mode-hook 'my:ac-c-headers-init)
      (add-hook 'c-mode-hook 'my:ac-c-headers-init)
    #+END_SRC

    #+RESULTS:
    | my:ac-c-headers-init | (lambda nil (easy-menu-add-item nil (quote (C)) (rtags-submenu-list))) | er/add-cc-mode-expansions | rtags-start-process-unless-running | irony-mode |

*** Irony-mode
   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :ensure t)

     (use-package company-irony
       :ensure t)

     (use-package flycheck-irony
       :ensure t
       :config
       (flycheck-irony-setup))

     (use-package company-irony-c-headers
       :ensure t)

     (add-hook 'c++-mode-hook 'irony-mode)
     (add-hook 'c-mode-hook 'irony-mode)
     (add-hook 'objc-mode-hook 'irony-mode)

     ;; replace the `completion-at-point' and `complete-symbol' bindings in
     ;; irony-mode's buffers by irony-mode's function

     (defun my-irony-mode-hook ()
       (define-key irony-mode-map [remap completion-at-point]
	 'counsel-irony)
       (define-key irony-mode-map [remap complete-symbol]
	 'counsel-irony)
       ;; ;; (define-key irony-mode-map [remap comment-region]
       ;; ;;   'compile)
       (eval-after-load 'company
	 '(add-to-list 'company-backends '(company-irony-c-headers company-irony))))

     (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
     (add-hook 'irony-mode-hook 'my-irony-mode-hook)
   #+END_SRC

>>>>>>> 7edf2a3821d20e31ba5acb3049ee645c0a17768b
   #+RESULTS:
   | my-flycheck-rtags-setup | my-irony-mode-hook | irony-cdb-autosetup-compile-options |

*** modern c++ font lock
    #+BEGIN_SRC emacs-lisp
      (use-package modern-cpp-font-lock
	:ensure t
	:config
	(modern-c++-font-lock-global-mode t))
    #+END_SRC

    #+RESULTS:
    : t

*** TODO: Install Rtags
    #+BEGIN_SRC emacs-lisp :tangle no
<<<<<<< HEAD
=======
    =======
*** Rtags
    #+BEGIN_SRC emacs-lisp :tangle no
>>>>>>> origin/master
      (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
      (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
      (add-hook 'objc-mode-hook 'rtags-start-process-unless-running)
      (setq rtags-completions-enabled t)
      (setq rtags-autostart-diagnostics t)
      (rtags-enable-standard-keybindings)
    #+END_SRC

    #+RESULTS:
    : rtags-location-stack-visualize

**** heml integration
    #+BEGIN_SRC emacs-lisp
      (use-package helm-rtags
	:ensure t
	:config
	(setq rtags-use-helm t)
	)
      (setq rtags-display-result-backend 'helm)
    #+END_SRC

    #+RESULTS:
    : helm

**** company-rtags support
    #+BEGIN_SRC emacs-lisp
      (use-package company-rtags
	:ensure t
	:config
	(setq rtags-completions-enabled t)
	(eval-after-load 'company
	  '(add-to-list 'company-backends 'company-rtags))
	(setq rtags-autostart-diagnostics t)
	(rtags-enable-standard-keybindings))
    #+END_SRC

    #+RESULTS:
    : t

**** flycheck rtags integration
      #+BEGIN_SRC emacs-lisp
	(use-package flycheck-rtags
	  :ensure t
	  :config
	  (defun my-flycheck-rtags-setup ()
	    (flycheck-select-checker 'rtags)
	    (setq-local flycheck-highlighting-mode 'symbols)
	    (setq-local flycheck-check-syntax-automatically nil))
	  )

	;(add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
	(add-hook 'irony-mode-hook 'my-flycheck-rtags-setup)
      #+END_SRC

      #+RESULTS:
      | my-flycheck-rtags-setup | my-irony-mode-hook | irony-cdb-autosetup-compile-options |

** javascript
   #+BEGIN_SRC emacs-lisp :tangle no
	  (use-package js2
	    :ensure t
	    :config
	    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

     (setq js-indent-level 2)
	  (use-package eslint-fix
	    :ensure t
	    :config
	     (eval-after-load 'js2-mode
		'(add-hook 'js2-mode-hook (lambda () (add-hook 'after-save-hook 'eslint-fix nil t)))))
   #+END_SRC

   #+RESULTS:
   : t

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package tern
       :ensure t
       :config
       (add-hook 'js-mode-hook (lambda () (tern-mode t)))
       )


     (use-package company-tern
       :ensure t
       :config
       (add-to-list 'company-backends 'company-tern)
       )
   #+END_SRC

   #+RESULTS:
   : t

*** Vuejs mode
    #+BEGIN_SRC emacs-lisp
      (setq js-indent-level 2)
      (add-hook 'js-mode-hook (lambda () (tern-mode t)))
      (use-package vue-mode
	 :ensure t
	 :config
	 (setq mmm-submode-decoration-level 0))
    #+END_SRC

    #+RESULTS:
    : t

** html && css
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :config
       (add-hook 'html-mode-hook
        (lambda ()
                  (rainbow-mode t)))
       (add-hook 'css-mode-hook
   	      (lambda ()
   		(rainbow-mode t)))
       (add-hook 'web-mode
   	      (lambda ()
   		rainbow-mode t)))

   #+END_SRC

   #+RESULTS:
   : t
** Dart
   #+BEGIN_SRC emacs-lisp
     (use-package dart-mode
       :ensure t
       )
   #+END_SRC

   #+RESULTS:

** R
** Java
*** JDEE
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package jdee
        :ensure t
        :config
        (add-hook 'java-mode-hook (setq jdee-server-dir "~/.jars")))
    #+END_SRC

    #+RESULTS:
    : t

** eclipse-ecl
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'ecl-mode "~/.emacs.d/ecl-mode.el/ecl-mode.el")
   #+END_SRC

   #+RESULTS:
   : ecl-mode

** PDDL domain
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'pddl-mode "~/.emacs.d/ppdl-mode.el")
   #+END_SRC

   #+RESULTS:

** Tratar CamelCase como palabras separadas.
   #+BEGIN_SRC emacs-lisp :tangle no
   (global-subword-mode 1)
   #+END_SRC

   #+RESULTS:
   : t
** PHP
   #+BEGIN_SRC emacs-lisp
     (flycheck-define-checker my-php
       "A PHP syntax checker using the PHP command line interpreter.

	See URL `http://php.net/manual/en/features.commandline.php'."
       :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
		 "-d" "log_errors=0" source)
       :error-patterns
       ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
	       (message) " in " (file-name) " on line " line line-end))
       :modes (php-mode php+-mode web-mode))

     (defun my/php-mode ()
       (flycheck-select-checker 'my-php)
       )

     (add-hook 'php-mode-hook 'my/php-mode)

     (add-hook 'php-mode-hook
	       '(lambda ()
		  (auto-complete-mode t)
		  (require 'ac-php)
		  (setq ac-sources  '(ac-source-php ) )
		  (yas-global-mode 1)
		  (ac-php-core-eldoc-setup ) ;; enable eldoc

		  (define-key php-mode-map  (kbd "C-]") 'ac-php-find-symbol-at-point)   ;goto define
		  (define-key php-mode-map  (kbd "C-t") 'ac-php-location-stack-back)    ;go back
		  ))


     (add-hook 'php-mode-hook
	       '(lambda ()
		  (require 'company-php)
		  (company-mode t)
		  (ac-php-core-eldoc-setup) ;; enable eldoc
		  (make-local-variable 'company-backends)
		  (add-to-list 'company-backends 'company-ac-php-backend)))
   #+END_SRC

   #+RESULTS:
   | (lambda nil (auto-complete-mode t) (require (quote ac-php)) (setq ac-sources (quote (ac-source-php))) (yas-global-mode 1) (ac-php-core-eldoc-setup) (define-key php-mode-map (kbd C-]) (quote ac-php-find-symbol-at-point)) (define-key php-mode-map (kbd C-t) (quote ac-php-location-stack-back))) | (lambda nil (require (quote company-php)) (company-mode t) (ac-php-core-eldoc-setup) (make-local-variable (quote company-backends)) (add-to-list (quote company-backends) (quote company-ac-php-backend))) | my/php-mode |

* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t)
    (use-package evil-magit
      :ensure t
      ;; :config
      ;; (add-hook 'with-editor-mode-hook 'evil-insert-state)
      )
  #+END_SRC

  #+RESULTS:
  : t

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-g") 'magit-status)
   #+END_SRC

   #+RESULTS:
   : magit-status

* Orgmode
** Autocompletado para org
   #+BEGIN_SRC emacs-lisp
     (use-package org-ac
       :ensure t
       :init
       (org-ac/config-default))
   #+END_SRC

   #+RESULTS:

** Autorevertmode en buffers de rogmode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'auto-revert-mode 1)
   #+END_SRC

   #+RESULTS:
   | (lambda nil (org-bullets-mode t)) | auto-complete-mode | er/add-org-mode-expansions | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-ac/setup-current-buffer | auto-revert-mode |

** Activar puntos en vez de asteriscos, que mola mas.
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook
                 (lambda ()
   		(org-bullets-mode t))))
   #+END_SRC

   #+RESULTS:
   : t
** Hacer que org no tenga scroll lateral.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'visual-line-mode)
   #+END_SRC

   #+RESULTS:
   | visual-line-mode | (lambda nil (org-bullets-mode t)) | auto-complete-mode | er/add-org-mode-expansions | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-ac/setup-current-buffer | auto-revert-mode |

** En vez de puntos suspensivos mostrar flecha '⤵'
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq org-ellipsis "⤵")
   #+END_SRC

   #+RESULTS:
   : ⤵

** Bloques de codigo en archivos orgmode
*** Activar el coloreado de sintaxis en bloques de código de orgmode
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC

   #+RESULTS:
   : t

*** Hacer que las tabulaciones actuen como si estuvieramos en un bugger del lenguaje indicadoBEGIN_SRC emacs-lisp
   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

   #+RESULTS:
   : t

*** No cambiar de ventana al editar un snippet de codigo
    #+BEGIN_SRC emacs-lisp :tangle no
      (setq org-src-window-setup 'current-window)
    #+END_SRC

    #+RESULTS:
    : current-window

** GTD y ideas en org-mode
*** Keywords TODO
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords '((sequence "TODO" "DOING" "WAITING" "|" "DONE")))
    #+END_SRC

    #+RESULTS:
    | sequence | TODO | DOING | WAITING |   |   | DONE |

*** Todos los archivos org los guardo en '~/org/'
     #+BEGIN_SRC emacs-lisp
       (setq org-directory "~/org")
     #+END_SRC

     #+RESULTS:
     : ~/org

*** Funcion que devuelve el path de un archivo org en "~/org"
   #+BEGIN_SRC emacs-lisp
     (defun org-file-path (filename)
       "Return the absolute address of an org file, given its relative name."
       (concat (file-name-as-directory org-directory) filename))
   #+END_SRC

   #+RESULTS:
   : org-file-path

*** Localizacion del archivo de todos
   #+BEGIN_SRC emacs-lisp
     (setq org-index-file (org-file-path "index.org"))
     (setq org-links-file (org-file-path "to-read.org"))
   #+END_SRC

   #+RESULTS:
   : ~/org/to-read.org

*** Localizacion del archive.org, ahi se guarda todo lo que hago.
   #+BEGIN_SRC emacs-lisp
     (setq org-archive-location
   	(concat (org-file-path "archive.org") "::* From %s"))
   #+END_SRC

   #+RESULTS:
   : ~/org/archive.org::* From %s

*** La agenda se carga desde el index
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files (list org-index-file
   			       "~/org/gcal.org"
   			       "~/org/idea.org"))
   #+END_SRC

   #+RESULTS:
   | ~/org/index.org | ~/org/gcal.org | ~/org/idea.org |

*** La combinacion =C-c C-x C-s= establece un TODO como DONE y lo almacena en el index
    #+BEGIN_SRC emacs-lisp
      (defun mark-done-and-archive ()
        (interactive)
        (org-todo 'done)
        (org-archive-subtree))
      (define-key org-mode-map "\C-c\C-x\C-s" 'mark-done-and-archive)

      (defun mark-done-and-archive-agenda ()
        (interactive)
        (org-agenda-todo 'done)
        (org-agenda-archive))
      (require 'org-agenda)
      (define-key org-agenda-mode-map "\C-c\C-x\C-s" 'mark-done-and-archive-agenda)
    #+END_SRC

    #+RESULTS:
    : mark-done-and-archive-agenda

*** en el log de orgmode cuando se ha completado una tarea
    #+BEGIN_SRC emacs-lisp
      (setq org-log-done 'time)
    #+END_SRC

    #+RESULTS:
    : time

*** Org-capture templates.
    Hay templates para varias cosas:
    - Ideas que se me van ocurriendo para proyectos que hacer.
    - Cosas que tengo que comprar.
    - Articulos o libros que tengo que leer.
    - TODOs que tengo me van surgiendo.
**** TODO completar descripcion de los templates.
    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
      '(("i" "Idea"
         entry
         (file (org-file-path "idea.org")
                 "* IDEA %?\n"))

        ("r" "To read item"
         checkitem
         (file+datetree (org-file-path "to-read.org"))
         " [ ] %? %^g")

        ("b" "Item to buy"
         entry
         (file+datetree "buylist.org")
         "* BUY %?")

         ("t" "Todo"
              entry
              (file+headline org-index-file "TASKS")
              "* TODO %?\n  ADDED:%T")

         ("u" "UGR Todo"
              entry
              (file+headline org-index-file "UGR")
              "* TODO %? %^g:UGR:\nADDED:%T")

         ("e" "Nuevo evento"
              entry
              (file "~/org/gcal.org")
          "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
         ))
     #+END_SRC

	  #+RESULTS:
	  | i | Idea | entry | (file (org-file-path idea.org) * IDEA %? |

**** Keybindings
     Accesos rapidos de teclado para tareas y notas en org mode
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC

#+RESULTS:
: org-capture

Presionar =C-c o i= para abrir *index.org*

#+BEGIN_SRC emacs-lisp
  (defun open-index-file ()
    "Open the master org TODO list."
    (interactive)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c o i") 'open-index-file)
#+END_SRC

#+RESULTS:
: open-index-file

=C-c o l= open links file
#+BEGIN_SRC emacs-lisp
    (defun open-links-file ()
      "Open my to-read list"
      (interactive)
      (find-file org-links-file)
      (flycheck-mode -1)
      (end-of-buffer)
      )

  (global-set-key (kbd "C-c o l") 'open-links-file)
#+END_SRC

#+RESULTS:
: open-links-file

   #+RESULTS:
   : find-to-read-file
**** Hit =M-n= to quickly open up a capture template for a new todo.
#+BEGIN_SRC emacs-lisp
  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

  (global-set-key (kbd "M-n") 'org-capture-todo)
#+END_SRC

#+RESULTS:
: org-capture-todo

*** Frame para capturas. :tangle no
    De [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Zamansky]]
    #+BEGIN_SRC emacs-lisp :tangle no
      (defadvice org-capture-finalize
      (after delete-capture-frame activate)
	"Advise capture-finalize to close the frame"
	(if (equal "capture" (frame-parameter nil 'name))
	(delete-frame)))

      (defadvice org-capture-destroy
      (after delete-capture-frame activate)
	"Advise capture-destroy to close the frame"
	(if (equal "capture" (frame-parameter nil 'name))
	(delete-frame)))

      ;; (use-package noflet
      ;;   :ensure t)

      ;; (defun make-cap
	  ture-frame ()
	"Create a new frame and run org-capture."
	(interactive)
	(make-frame '((name . "Capture")))
	(select-frame-by-name "Capture")
	(noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (delete-other-windows)
      (delete-other-frames)
      (org-capture)))

      (add-hook 'org-capture-mode-hook 'delete-other-windows)
      (add-hook 'org-capture-after-finalize-hook 'delete-frame)
    #+END_SRC

    #+RESULTS:
    | delete-frame |

    ;; TODO: fix delete-other-windows
    #+RESULTS:
    : make-capture-frame

*** gcal-org
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package org-gcal
        :ensure t
        :config
        (load-file "~/.emacs.d/hidden.el"))
    #+END_SRC

    #+RESULTS:
    : t

**** hooks para la agenda:
     #+BEGIN_SRC emacs-lisp :tangle no
       ;(add-hook 'after-init-hook (lambda () (org-gcal-sync) ))
       (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
       (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
     #+END_SRC

     #+RESULTS:
     | (lambda nil (org-gcal-sync)) | delete-frame |

*** my-org-agenda-list
    #+BEGIN_SRC emacs-lisp
      (defun my-org-agenda-list()
          (interactive)
        """show agenda without other windows"
        (org-agenda-list)
        (delete-other-windows))

    #+END_SRC

    #+RESULTS:
    : my-org-agenda-list

** Exportando desde orgmode
*** Exportar a markdown y beamer directamente
   #+BEGIN_SRC emacs-lisp
     (use-package ox-md)
     (use-package ox-beamer)
     (use-package ox-reveal)
   #+END_SRC

   #+RESULTS:
   : ox-reveal
*** Export to bootstrap
    #+BEGIN_SRC emacs-lisp
      (use-package ox-twbs
        :ensure t)
    #+END_SRC

    #+RESULTS:

*** Permitir que babel evalue codigo de GNUPLOT, emacs-lisp, ruby, y python.
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
	(ruby . t)
	(python . t)
	(dot . t)
	(gnuplot . t)))

     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

   #+RESULTS:

*** Desactivar la confirmacion para evaluar codigo
   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

   #+RESULTS:

*** Exportar a PDF
Activar el coloreado de codigo con pylint
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-pdf-process
   	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+END_SRC

   #+RESULTS:
   | pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f | pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f | pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f |

Ademas incluimos este paquete en todos los documetos de latex que exportemos
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted)
   #+END_SRC

   #+RESULTS:
   : minted

*** Export to hugo for bloging.
    #+BEGIN_SRC emacs-lisp
      (use-package ox-hugo
	:ensure t
	:after ox
	:config
	(setq org-hugo-default-section-directory "blog")
	(setq org-hugo-base-dir "~/src/rafaelleru.github.io")
	)
    #+END_SRC

    #+RESULTS:
    : t

** Org-sync para gestionar los issues de github en orgmode
   #+BEGIN_SRC emacs-lisp
      (use-package org-sync
        :ensure t
        :config
        ;backend para github si queremos mas solo añadir
        (require 'org-sync-github))
   #+END_SRC

   #+RESULTS:
   : t

*** funcion que detecta si hay un repositorio de git en el directorio actual y carga automaticamente los issues en <nombre_repo>.org
**** TODO la funcion y aprender lisp xD
** funcion para actualizar el indice de cosas que leer en el navegador
   #+BEGIN_SRC emacs-lisp
     ;; Auto-export org files to html when saved
     (defun org-mode-export-hook()
       "Auto export html"
       (when (eq major-mode 'org-mode)
         (when (equal buffer-file-name "/home/rafa/org/to-read.org")
          (org-twbs-export-to-html t))))

     (add-hook 'after-save-hook 'org-mode-export-hook)
   #+END_SRC

   #+RESULTS:
   | org-mode-export-hook |

* small-shell from [[https://github.com/vterron/dot-emacs][@pyctor]]
#+BEGIN_SRC emacs-lisp
  (defun small-shell ()
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (shrink-window (- (window-height) 12))
    (eshell "/bin/zsh")) ;Me gusta mas eshell que ansi-term que usaba el original

  (global-set-key (kbd "C-ñ") 'small-shell)
  (defun delete-shell-window ()
    (interactive)
    (when (eq major-mode 'eshell)
      (when (eq window-height 12)
	(delete-window t))))

  ;; (add-hook 'eshell-exit-hook
  ;; 	  (lambda ()
  ;; 	    ((if (eq window-height 12)
  ;; 		))))
#+END_SRC

#+RESULTS:
: delete-shell-window
** salir de small-shell y matar el buffer
   como solo la uso para cosas brebes no me interesa tener abiertas 2000000 instancias de small-shells
   #+BEGIN_SRC emacs-lisp :tangle no
     (add-hook 'eshell-hook (lambda ()
            		  (local-set-key (kbd "C-x C-k p")
         				 (delete-window)
            				 )))
   #+END_SRC

   #+RESULTS:
   | lambda | nil | (local-set-key (kbd C-x C-k p) (delete-window)) |

* pop-shell
  #+BEGIN_SRC emacs-lisp
    (use-package shell-pop
      :ensure t
      :init
      (setq shell-pop-shell-type "eshell")
      (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell))))))
  #+END_SRC

  #+RESULTS:

* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode 1))
  #+END_SRC

  #+RESULTS:
* Desactivo las flechas para no usarlas, que para algo tiene emacs tantos atajos
  #+BEGIN_SRC emacs-lisp
    (defun disable-arrow-keys ()
    (interactive)
	;;;Desactiva la nevagacion con las flechas
    (global-unset-key (kbd "<left>"))
    (global-unset-key (kbd "<right>"))
    (global-unset-key (kbd "<up>"))
    (global-unset-key (kbd "<down>")))


    (defun enable-arrow-keys ()
    (interactive)
	;;;Activa la navegacion con flecha
     (global-set-key (kbd "<left>") 'left-char)
     (global-set-key (kbd "<right>")  'right-char)
     (global-set-key (kbd "<up>") 'previous-line)
     (global-set-key (kbd "<down>") 'next-line))

    ;(disable-arrow-keys) He conseguido no usar las flechas al fin
  #+END_SRC

  #+RESULTS:
  : enable-arrow-keys

  #+BEGIN_SRC emacs-lisp
    (add-hook 'term-mode-hook
  	    (lambda ()
  	      (local-set-key (kbd "C-c C-k") 'kill-buffer-this-buffer)))
  #+END_SRC

  #+RESULTS:
  | lambda | nil | (local-set-key (kbd C-c C-k) (quote kill-buffer-this-buffer)) |

* Abrir cheatseet de emacs.
  #+BEGIN_SRC emacs-lisp
    (defun open-cheat-sheet ()
      "Abre en un buffer aparte el cheat-sheet de emacs realizado por mi en orgmode"
      (interactive)
      ;; (split-window-horizontally)
      ;; (other-window 1)
      ;; (shrink-window (- (window-width) 30)) ;No va la anchura pero weno
      (find-file-other-frame "~/.emacs.d/cheat-sheet.org"))
  #+END_SRC

  #+RESULTS:
  : open-cheat-sheet

* Atajos personalizados
** al abrir la lista de buffer cambiar directamente a esa ventana
   Cuando ejecuto =C-x C-b= normalmente quiero hacer algo como eliminar varios buffers a la vez, por lo que cada vez que abra la lista de buffers quiero saltar a ella.
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC

  #+RESULTS:
  : ibuffer
** kill-this-buffer con =C-x k=
   Normalmente cuando ejecuto =C-x k= es para eliminar el buffer en el que estoy actualmente.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x k") 'kill-this-buffer)
   #+END_SRC

   #+RESULTS:
   : kill-this-buffer

* Spaceline
  #+BEGIN_SRC emacs-lisp
	(use-package spaceline-all-the-icons
	  :ensure t
	  :config
	  ;;(spaceline-all-the-icons-theme)
	  ;;(setq spaceline-all-the-icons-primary-separator 'arrow)
	  )

	(use-package spaceline
	  :ensure t
	  :config
	  (require 'spaceline-config)
	  (spaceline-spacemacs-theme)
	  (setq powerline-default-separator 'bar)
	  (spaceline-helm-mode)
	  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
	  )

   #+END_SRC

  #+RESULTS:
  : t

* powerline
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package powerline
      :ensure t
      :config
      (powerline-evil-vim-color-theme))

    (use-package powerline-evil
      :ensure t
      :after powerline)
  #+END_SRC

  #+RESULTS:
  : powerline-evil
